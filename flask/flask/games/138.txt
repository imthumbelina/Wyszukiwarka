Jump to content Google Sign in options Remember me This is not recommended for shared computers Sign in anonymously Don't add me to the active users list Privacy Policy      Sign In    Create Account 6 Search Advanced Search section: Google This database Forums Members Help Files Developer Journals Gallery Calendar Downloads Resources Store Classifieds Tracker Links Home For Beginners Articles All Articles Post an Article Technical Game Programming General Programming Graphics Programming and Theory DirectX and XNA OpenGL Multiplayer and Network Programming Artificial Intelligence Math and Physics Mobile Development APIs and Tools Creative Game Design Music and Sound Visual Arts Business Breaking into the Industry Production and Management Interviews Business and Law Event Coverage Forums All Forums Community Interaction GDNet Lounge Coding Horrors Article Writing GDNet Comments, Suggestions and Ideas Your Announcements Technical Game Programming General Programming Graphics Programming and Theory DirectX and XNA OpenGL Multiplayer and Network Programming Artificial Intelligence Math and Physics Mobile & Console Development Build Systems & Source Control APIs and Tools Creative Game Design Writing For Games Music and Sound Visual Arts Gallery Business Breaking into the Industry Business & Law Production & Management Community Developer Journals Screenshot Showdown GDNet+ Subscriptions Gallery Books Store Top Members Classifieds Job Offers Contractors For Hire Contract Projects Hobbyist Projects Marketplace Home » Articles » Business » Production and Management » Article: Linguistic Testing: Devil in the Details Watched Content New Content Banner advertising on our site currently available from just $5! 1. Learn about the promo. 2. Sign up for GDNet+. 3. Set up your advert! More Like This Crowdin: Localizing Without Pain 300 Employees On Multiple Continents: How We Work Without An Office The Top 10 Languages for Localizing Your Mobile Game How To Make Videos For Games Why Do Mobile Games Often Fail at International Expansion? Categories (See All) Technical Game Programming General Programming Graphics Programming and Theory DirectX and XNA OpenGL Multiplayer and Network Programming Artificial Intelligence Math and Physics Mobile Development APIs and Tools Creative Game Design Music and Sound Visual Arts Business Event Coverage Breaking Into the Industry Business and Law Interviews Production and Management Gamedev.net Help Recent Resources Improve Player Retention Reacting to Behavior [Server Scripts] May 12 2015 04:22 PM | 6 Comments Dynamic vertex pulling with D3D11 Apr 29 2015 11:37 AM | 5 Comments Giving Away $17,000 Worth of Toto Temple Deluxe at Pax East Apr 27 2015 07:27 AM | 2 Comments Everything You Ever Wanted to Know About Authenticode Signing May 08 2015 11:06 AM | 5 Comments Shader Cross Compilation and Savvy - The Smart Shader Cross Compiler May 15 2015 09:23 AM | 0 Comments Crowdin: Localizing Without Pain Apr 15 2015 11:07 AM | 1 Comments Automated Deployment of Your Game Apr 13 2015 10:47 AM | 3 Comments Show more » | View all recent resources» 2 Like 8Likes Dislike Linguistic Testing: Devil in the Details By Kirill Kliushkin | Published Dec 04 2014 06:19 AM in Production and Management Peer Reviewed by (Michael Tanczos, Endurion, jbadams) User Interfaces Localization Translation Interface GUI Usability Testing Software Testing Games Testing Websites Foreign Languages Linguistic Testing Hide If you want a high-quality localization of your product, linguistic testing is an absolute must. To get good results for any kind of project – whether a site, application, game, or mobile app – you have to do more than just translate strings in resource files. At the final stage of localization, linguistic testers must carefully and thoughtfully perform one more task: testing the translation as implemented in the final product. Linguistic testing accomplishes three (and sometimes even more) tasks: First, testing allows pinpointing strings that do not fit into their GUI elements, be these menus, buttons, or toolbars. This can happen because the length of words is different in different languages. When translating from Russian to French or German, for example, the length of text increases by 15 to 20%. Things are even more complicated for Asian languages. A handful of Chinese characters when translated into English, for example, turn into a long phrase that simply cannot fit in the relevant GUI window. For character languages it is also a good idea to increase the font size, so that all the small details of characters are legible. GUIs should be beautiful and localization testing is critical for keeping them that way. The second job of linguistic testing is to make sure that phrases fit their context. Most often this question arises when testing games: does the translation match the in-game situation that the end user encounters? When making the initial translation, the translator was looking at resource files and, although helped by comments and screenshots, still saw only a list of strings. So there are probably places where the translation does not capture 100% of the context. Common errors in games include incorrect gender, repeating units, and incorrect object names. Non-games can have their complexities too: if we are translating the word “rate” from English, do we mean the price (“hourly rate”) or ratio of currencies (“exchange rate”)? Or maybe “rate” is used as a verb – but then is it in the sense of evaluate (“to rate an app”) or to deserve (“to rate a mention”)? These aspects are tricky and deserve close attention. Third, it's important to check how the text in your interface is displayed in different localizations of the target operating system. This can help solve possible issues with text encoding, such as when special characters (for example, diacritics or umlauts) in different languages are displayed incorrectly. This screenshot shows incorrect display of special characters. Without linguistic testing, this is what French gamers would have seen in the interface. What's the right way to do linguistic testing? For almost ten years, we at Alconost have offered professional translation, localization, and linguistic testing in forty languages. Here are a few hard-won tips for linguistic testing based on our experience. Let's say that all of the interface strings have been translated and integrated into the product. What is the next step? Optimally, the translators now receive the localized product and carefully review each window, checking each and every piece of text. Why do we say “optimally” here? In practice, complications crop up both on the translator side and on the client side. Sometimes a translator may not have a device capable of running the product, or the client cannot provide a custom build or grant access to the product. As a workaround, the client takes as many screenshots as possible for review by the tester. Testing goes beyond just checking interface elements – it includes system errors, help materials, and other accompanying documentation. When a tester finds an error, he or she makes corrections in the translation file and also records the error in the bug list. Bugs can include pieces of untranslated text, missing text, incorrectly formatted dates or numbers, incorrect first name/last name order, or incorrect currency. Keeping a bug list gives the client a visual representation of how many bugs have been found and how each of them has been fixed. The situation is more complicated when, besides translation errors, there are cosmetic errors: the translated strings may be too long and get cut off, or even spill out of their button/window. In these situations, the usual method is to find a shorter way of rephrasing the text. If worst comes to worst and there is no way of rephrasing the text, then we can simply remove a portion of it. Another solution in some situations is to leave a word in the original language (i.e., in English), but this works only when the term is very well known and translation is not truly necessary. Three secrets for awesome linguistic testing Secret No. 1: By choosing the right tools during the translation stage, you can significantly simplify and speed up linguistic testing later. Unlock this “magic” by automating as much of translators’ work as possible. At Alconost we do this by using the latest computer-assisted translation tools (SDL Trados, SDL Passolo, OmegaT, Sisulizer, Poedit, and MemoQ) and cloud-based platforms (Webtranslateit, Crowdin, GetLocalization, Google Translator Toolkit). These CAT tools allow multiple translators and editors to work on a project at the same time, as well as utilize translation memory. Translation memory is powerful: each translated word is memorized, and when a word is found in the text a second time (or third or fourth...), the translation memory will make a suggestion based on the existing translation. This makes the translation consistent, reducing the time required for linguistic testing and preventing issues from occurring. Secret No. 2: It's critical to write the test plan carefully. Make the work as simple as it can be, while making sure that everything (and we mean everything!) is verified and proofread. The test plan should explain to the translator how to view all texts in full and provide access to hidden areas of the product (error messages, bonus levels in games, paid functionality in software). When testing games, it's best to provide translators with cheat codes for quickly completing all levels. Secret No. 3: Linguistic testing needs to be done by professional translators who are native speakers in the language being tested. Ideally, translation should be performed by only natives as well (in our nine years of experience at Alconost Translations, we have seen that excellent translation quality is possible only when native speakers are used). But if for whatever reason the translation was performed by non-natives, it is even more important that linguistic testing be performed by a specialist who was raised and educated in the target language. Only native speakers can pick up all the subtleties of context, as well as carefully and accurately shorten words and phrases. As you can see, linguistic testing is a key step in the localization process. If you want a high-quality product, ignore it at your peril! Test well and prosper! About the Author(s) Kirill Kliushkin started out as a localization project manager at Alconost translation agency, and then performed various marketing and business development activities as well as co-founded and built the video production company Alconost Video (http://alconost.com/video). Currently, the COO of Alconost (http://alconost.com) License GDOL (Gamedev.net Open License) Comments EVIL_ENT Dec 07 2014 05:15 AM Nice advertisement. Now I really feel like contacting professional translators at ALCONOST who use the right tools during the translation stage and are native speakers in the language being tested. Also did you know that ALCONOST have nine years of experience and excellent translation quality and offer professional translation, localization, and linguistic testing in forty languages? ALCONOST ALCONOST ALCONOST [link link link]. Note: Please offer only positive, constructive comments - we are looking to promote a positive atmosphere where collaboration is valued above all else. Home » Home » Articles » Business » Production and Management » Article: Linguistic Testing: Devil in the Details English (USA) English (USA) English (USA) (COPY) Mark Community Read Forums Members Developer Journals Gallery Downloads Resources Store Classifieds Tracker Links Mark all as read Help PARTNERS Copyright © 1999-2015 GameDev.Net LLC GameDev.net™, the GameDev.net logo, and GDNet™ are trademarks of GameDev.net, LLC Navigation Home For Beginners Technical Creative Business Customer Service GDNet+ Subscriptions Job Advertising Terms of Service Privacy Policy Company Info About Us Advertise on Gamedev.net Contact Us Sign In   Use Google   Use Facebook   Use Twitter Need an account? Register now! Username Password I've forgotten my password Remember me This is not recommended for shared computers Sign in anonymously Don't add me to the active users list Privacy Policy